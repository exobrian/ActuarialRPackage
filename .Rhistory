"Pricing.Expenses.Dividend_Expense.Amount","Pricing.Min_CTR.Available",
"Manual_Premium.Total","Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage","Price.EAPxDIV_Achieved",
"Info.Proposed.Issued","^SubmissionStatus")
TempCombined2 <- TempCombined[,which(grepl(paste(columnsToKeep,collapse="|"), colnames(TempCombined)))
}
if(FilenameData$ScrubFlag[i] == 1) {
columnsToKeep <- c("^Info","^Filters","^PercentChange","Max_Credit.Available","Triggers",
"KP_Pricing_Loss_Adj","Pricing.Expenses","Manual_Premium.PrincipalState",
"Filename","Loss_Info","Class_Fit_Adjustment","LoadingError.Indicator","Broker",
"Pricing.Par_Plan.Best_Par_Plan","Premium.EAP_excl_TRIA.PrincipalState",
"Premium.EAP_excl_TRIA.Total","Class_Premium_Detail.Rate.Row",
"Pricing.Expenses.Dividend_Expense.Amount","Pricing.Min_CTR.Available",
"Manual_Premium.Total","Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage","Price.EAPxDIV_Achieved",
"Info.Proposed.Issued","^SubmissionStatus")
TempCombined2 <- TempCombined[,which(grepl(paste(columnsToKeep,collapse="|"), colnames(TempCombined)))]
}
view(TempCombined2)
FilenameData$ScrubFlag[i]
FilenameData$ScrubFlag
columnsToKeep <- c("^Info","^Filters","^PercentChange","Max_Credit.Available","Triggers",
"KP_Pricing_Loss_Adj","Pricing.Expenses","Manual_Premium.PrincipalState",
"Filename","Loss_Info","Class_Fit_Adjustment","LoadingError.Indicator","Broker",
"Pricing.Par_Plan.Best_Par_Plan","Premium.EAP_excl_TRIA.PrincipalState",
"Premium.EAP_excl_TRIA.Total","Class_Premium_Detail.Rate.Row",
"Pricing.Expenses.Dividend_Expense.Amount","Pricing.Min_CTR.Available",
"Manual_Premium.Total","Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage","Price.EAPxDIV_Achieved",
"Info.Proposed.Issued","^SubmissionStatus")
TempCombined2 <- TempCombined[,which(grepl(paste(columnsToKeep,collapse="|"), colnames(TempCombined)))]
TempCombined2$Info.Proposed.Issued
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
TempCombined$Info.Proposed.Issue
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
if(FilenameData$ScrubFlag[i] = 1) {
columnsToKeep <- c("^Info", "^Filters", "^PercentChange", "Max_Credit.Available", "Triggers",
"KP_Pricing_Loss_Adj", "Pricing.Expenses", "Manual_Premium.PrincipalState",
"Filename", "Loss_Info", "Class_Fit_Adjustment", "LoadingError.Indicator", "Broker",
"Pricing.Par_Plan.Best_Par_Plan", "Premium.EAP_excl_TRIA.PrincipalState",
"Premium.EAP_excl_TRIA.Total", "Class_Premium_Detail.Rate.Row",
"Pricing.Expenses.Dividend_Expense.Amount", "Pricing.Min_CTR.Available",
"Manual_Premium.Total", "Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage", "Price.EAPxDIV_Achieved",
"Info.Proposed.Issued", "SubmissionStatus")
TempCombined <- TempCombined[,which(grepl(paste(columnsToKeep, collapse="|"), colnames(TempCombined)))]
} else {
TempCombined <- TempCombined[, -which(grepl("Schedule_Rating", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("Comment", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("Employer", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("Audit_View", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("_ICW_Group_Severity_Factor", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("Indicator\\.Row", colnames(TempCombined)))]
TempCombined <- TempCombined[, -which(grepl("in\\.Large_Losses", colnames(TempCombined)))]
}
TempCombined$Filters.Proposed.CombinedRatio = coalesce(ifelse(abs(1-TempCombined$Info.Proposed.CombinedRatio - TempCombined$Proposed.Pricing.Income.Underwriting.Percentage) < ProposedMaxDistanceFromTarget, 1, 0),0)
TempCombined$Filters.PriorModel.CombinedRatio = coalesce(ifelse(abs(1-TempCombined$Info.PriorModel.CombinedRatio - TempCombined$PriorModel.Pricing.Income.Underwriting.Percentage) < PriorModelMaxDistanceFromTarget, 1, 0),0)
TempCombined$Filters.PriorYear.CombinedRatio = coalesce(ifelse(abs(1-TempCombined$Info.PriorYear.CombinedRatio - TempCombined$PriorYear.Pricing.Income.Underwriting.Percentage) < PriorYearMaxDistanceFromTarget, 1, 0),0)
TempCombined$Filters.PriorModel.MasterFilter <- TempCombined$Filters.PriorModel.MasterFilter * TempCombined$Filters.Proposed.CombinedRatio * TempCombined$Filters.PriorModel.CombinedRatio
TempCombined$Filters.PriorYear.MasterFilter <- TempCombined$Filters.PriorYear.MasterFilter * TempCombined$Filters.Proposed.CombinedRatio * TempCombined$Filters.PriorYear.CombinedRatio
## Writing to the Comparison file
SavePath <- file.path(PricingPath$Path[1] ,FilenameData$State[i])
dir.create(SavePath ,showWarnings = FALSE)
PricingFilenames <- list.files(SavePath)
CurrentComparisonNumbers <- c(str_extract(str_extract(PricingFilenames ,pattern = "[0-9]{2}.*Comparison") ,pattern = "[0-9]{2}"),str_extract(str_extract(PricingFilenames ,pattern = "[0-9]{2}.*Impact") ,pattern = "[0-9]{2}"))
NewComparisonNumber <- ifelse(all(is.na(CurrentComparisonNumbers)) ,"00" ,str_pad(as.numeric(max(CurrentComparisonNumbers ,na.rm = TRUE)) + 1 ,2 ,pad = "0"))
ComparisonSpecialName <- ifelse(is.na(FilenameData$Name[i]) ,"" ,str_c(" " ,FilenameData$Name[i]))
ComparisonName <- str_c(NewComparisonNumber ," " ,FilenameData$State[i] ," Comparison" ,ComparisonSpecialName ,".xlsx")
ComparisonDataName <- str_c(NewComparisonNumber ," " ,FilenameData$State[i] ," XLDP Output Data" ,ComparisonSpecialName ,".xlsx")
WarningsFileName <- str_c(NewComparisonNumber ," " ,FilenameData$State[i] ," R Data Load Errors" ,ComparisonSpecialName ,".xlsx")
file.copy(PricingPath$Template[1],file.path(SavePath ,ComparisonName))
write_xlsx(TempCombined ,path = file.path(SavePath ,ComparisonDataName) ,format_headers = FALSE)
write_xlsx(TempWarnings ,path = file.path(SavePath ,WarningsFileName) ,format_headers = FALSE)
}
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
FilenameData$ScrubFlag
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
View(TempCombined)
FilenameData$ScrubFlag
FilenameData$ScrubFlag[8]
as.character(2)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
if(as.character(FilenameData$ScrubFlag[i]) == "1") {
columnsToKeep <- c("^Info", "^Filters", "^PercentChange", "Max_Credit.Available", "Triggers",
"KP_Pricing_Loss_Adj", "Pricing.Expenses", "Manual_Premium.PrincipalState",
"Filename", "Loss_Info", "Class_Fit_Adjustment", "LoadingError.Indicator", "Broker",
"Pricing.Par_Plan.Best_Par_Plan", "Premium.EAP_excl_TRIA.PrincipalState",
"Premium.EAP_excl_TRIA.Total", "Class_Premium_Detail.Rate.Row",
"Pricing.Expenses.Dividend_Expense.Amount", "Pricing.Min_CTR.Available",
"Manual_Premium.Total", "Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage", "Price.EAPxDIV_Achieved",
"Info.Proposed.Issued", "SubmissionStatus")
TempCombined <- TempCombined[,which(grepl(paste(columnsToKeep, collapse="|"), colnames(TempCombined)))]
}
TempCombined$Info.Proposed.Issued
View(PricingPath)
View(PricingPath)
columnsToKeep <- c("^Info", "^Filters", "^PercentChange", "Max_Credit.Available", "Triggers",
"KP_Pricing_Loss_Adj", "Pricing.Expenses", "Manual_Premium.PrincipalState",
"Filename", "Loss_Info", "Class_Fit_Adjustment", "LoadingError.Indicator", "Broker",
"Pricing.Par_Plan.Best_Par_Plan", "Premium.EAP_excl_TRIA.PrincipalState",
"Premium.EAP_excl_TRIA.Total", "Class_Premium_Detail.Rate.Row",
"Pricing.Expenses.Dividend_Expense.Amount", "Pricing.Min_CTR.Available",
"Manual_Premium.Total", "Loss_Info.Severity_Override.Flag",
"Pricing.Income.Underwriting.Percentage", "Price.EAPxDIV_Achieved",
"Info.Proposed.Issued", "SubmissionStatus")
TempCombined <- TempCombined[,which(grepl(paste(columnsToKeep, collapse="|"), colnames(TempCombined)))]
TempCombined$Info.Proposed.Issued
TempCombined <- TempCombined %>%
mutate(Info.id = Proposed.id
,Info.AccountId = Proposed.Account_ID
,Info.Proposal_Number = Proposed.Proposal_Number
#Loading Errors
,Info.PriorModel.LoadingError = ifelse(Proposed.LoadingError.Indicator + PriorModel.LoadingError.Indicator > 0, 1, 0)
,Info.PriorYear.LoadingError = ifelse(Proposed.LoadingError.Indicator + PriorYear.LoadingError.Indicator > 0, 1, 0)
#Par and CR Info; CR values are set as placeholders, will be set after this command
,Info.Proposed.ParPlanPercent = as.numeric(ifelse(Proposed.Pricing.Par_Plan.Best_Par_Plan == "" | Proposed.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(Proposed.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(Proposed.Pricing.Par_Plan.Best_Par_Plan, nchar(Proposed.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(Proposed.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.PriorModel.ParPlanPercent = as.numeric(ifelse(PriorModel.Pricing.Par_Plan.Best_Par_Plan == "" | PriorModel.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(PriorModel.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(PriorModel.Pricing.Par_Plan.Best_Par_Plan, nchar(PriorModel.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(PriorModel.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.PriorYear.ParPlanPercent = as.numeric(ifelse(PriorYear.Pricing.Par_Plan.Best_Par_Plan == "" | PriorYear.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(PriorYear.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(PriorYear.Pricing.Par_Plan.Best_Par_Plan, nchar(PriorYear.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(PriorYear.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.Proposed.CombinedRatio = proposedCR
,Info.PriorModel.CombinedRatio = priorModelCR
,Info.PriorYear.CombinedRatio = priorYrCR
#Premium Flags
,Info.SingleStateFlag = ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState == Proposed.Premium.EAP_excl_TRIA.Total, 1, 0)
,Info.Proposed.PercentEapInPrincipalState = ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total == Inf | is.na(Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total), "", Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total)
#EAP Calculations
,Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(Proposed.Premium.EAP_excl_TRIA.Total == "" | Proposed.Pricing.Expenses.Dividend_Expense.Amount == "", "", Proposed.Premium.EAP_excl_TRIA.Total - Proposed.Pricing.Expenses.Dividend_Expense.Amount))
,Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(PriorModel.Premium.EAP_excl_TRIA.Total == "" | PriorModel.Pricing.Expenses.Dividend_Expense.Amount == "", "", PriorModel.Premium.EAP_excl_TRIA.Total - PriorModel.Pricing.Expenses.Dividend_Expense.Amount))
,Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(PriorYear.Premium.EAP_excl_TRIA.Total == "" | PriorYear.Pricing.Expenses.Dividend_Expense.Amount == "", "", PriorYear.Premium.EAP_excl_TRIA.Total - PriorYear.Pricing.Expenses.Dividend_Expense.Amount))
,Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState == "", "", Proposed.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.Proposed.ParPlanPercent)))
,Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(PriorModel.Premium.EAP_excl_TRIA.PrincipalState == "", "", PriorModel.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.PriorModel.ParPlanPercent)))
,Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(PriorYear.Premium.EAP_excl_TRIA.PrincipalState == "", "", PriorYear.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.PriorYear.ParPlanPercent)))
,Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv == "" | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv == "" | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv == "" | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv == "" | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio)))
#MP Calculations
,Info.Proposed.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(Proposed.Premium.Manual_Premium.Total == "", "", Proposed.Premium.Manual_Premium.Total/(1+coalesce(Proposed.Pricing.Min_CTR.Available,0))))
,Info.PriorModel.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(PriorModel.Premium.Manual_Premium.Total == "", "", PriorModel.Premium.Manual_Premium.Total/(1+coalesce(PriorModel.Pricing.Min_CTR.Available,0))))
,Info.PriorYear.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(PriorYear.Premium.Manual_Premium.Total == "", "", PriorYear.Premium.Manual_Premium.Total/(1+coalesce(PriorYear.Pricing.Min_CTR.Available,0))))
,Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(Proposed.Premium.Manual_Premium.PrincipalState == "", "", Proposed.Premium.Manual_Premium.PrincipalState/(1+coalesce(Proposed.Pricing.Min_CTR.Available,0))))
,Info.PriorModel.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(PriorModel.Premium.Manual_Premium.PrincipalState == "", "", PriorModel.Premium.Manual_Premium.PrincipalState/(1+coalesce(PriorModel.Pricing.Min_CTR.Available,0))))
,Info.PriorYear.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(PriorYear.Premium.Manual_Premium.PrincipalState == "", "", PriorYear.Premium.Manual_Premium.PrincipalState/(1+coalesce(PriorYear.Pricing.Min_CTR.Available,0))))
#Cost and Profit Calculations
,Info.Proposed.Costs = as.numeric(Proposed.Price.EAPxDIV_Achieved * (1 - Proposed.Pricing.Income.Underwriting.Percentage))
,Info.PriorModel.Costs = as.numeric(PriorModel.Price.EAPxDIV_Achieved * (1 - PriorModel.Pricing.Income.Underwriting.Percentage))
,Info.PriorYear.Costs = as.numeric(PriorYear.Price.EAPxDIV_Achieved * (1 - PriorYear.Pricing.Income.Underwriting.Percentage))
,Info.Proposed.Profit = Proposed.Pricing.Income.Underwriting.Percentage
,Info.PriorModel.Profit = PriorModel.Pricing.Income.Underwriting.Percentage
,Info.PriorYear.Profit = PriorYear.Pricing.Income.Underwriting.Percentage
#Filters
,Filters.EapDistribution = coalesce(ifelse(Info.Proposed.PercentEapInPrincipalState >=MinPercentInState, 1, 0),0)
,Filters.ManualExclude = coalesce(ifelse(Info.id %in% manualexclude, 0, 1),0)
,Filters.ARatedClass = coalesce(ifelse(sum(TempCombined[1,which(grepl("Class_Premium_Detail.Rate", colnames(TempCombined)))] == 99.99, na.rm=T) > 0 | sum(TempCombined[1,which(grepl("Class_Premium_Detail.Rate", colnames(TempCombined)))] == 99999.99, na.rm=T) > 0, 0, 1),0)
,Filters.PriorModel.AccountExists = coalesce(ifelse(PriorModel.BrokerData.serviceCall == "", 0, 1),0)
,Filters.PriorYear.AccountExists = coalesce(ifelse(PriorYear.BrokerData.serviceCall == "", 0, 1),0)
,Filters.Proposed.CombinedRatio = coalesce(ifelse(abs(1-Info.Proposed.CombinedRatio - Proposed.Pricing.Income.Underwriting.Percentage) < ProposedMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorModel.CombinedRatio = coalesce(ifelse(abs(1-Info.PriorModel.CombinedRatio - PriorModel.Pricing.Income.Underwriting.Percentage) < PriorModelMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorYear.CombinedRatio = coalesce(ifelse(abs(1-Info.PriorYear.CombinedRatio - PriorYear.Pricing.Income.Underwriting.Percentage) < PriorYearMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorModel.PremiumSize = coalesce(ifelse(is.na(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf,0,ifelse(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize & Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize, 1, 0)),0)
,Filters.PriorYear.PremiumSize = coalesce(ifelse(is.na(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf,0,ifelse(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize & Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize, 1, 0)),0)
,Filters.PriorModel.MasterFilter = Filters.EapDistribution * Filters.ManualExclude * Filters.ARatedClass * Filters.PriorModel.AccountExists * Filters.PriorModel.CombinedRatio * Filters.PriorModel.PremiumSize * Filters.Proposed.CombinedRatio
,Filters.PriorYear.MasterFilter = Filters.EapDistribution * Filters.ManualExclude * Filters.ARatedClass * Filters.PriorYear.AccountExists * Filters.PriorYear.CombinedRatio * Filters.PriorYear.PremiumSize * Filters.Proposed.CombinedRatio
,Filters.PriorModel.MasterFilter.Costs = Filters.PriorModel.AccountExists * Filters.ARatedClass
,Filters.PriorYear.MasterFilter.Costs = Filters.PriorYear.AccountExists * Filters.ARatedClass
#% Chgs
,PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv/Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv/Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorModel.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv/Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorYear.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv/Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorModel.PrincipalState.ManualPremium.NetofCTR = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR/Info.PriorModel.Premium.ManualPremium.PrincipalState.NetofCTR - 1, 2)))
,PercentChange.PriorYear.PrincipalState.ManualPremium.NetofCTR = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR/Info.PriorYear.Premium.ManualPremium.PrincipalState.NetofCTR - 1, 2)))
,PercentChange.PriorModel.Proft = as.numeric(Proposed.Pricing.Income.Underwriting.Percentage - PriorModel.Pricing.Income.Underwriting.Percentage)
,PercentChange.PriorYear.Proft = as.numeric(Proposed.Pricing.Income.Underwriting.Percentage - PriorYear.Pricing.Income.Underwriting.Percentage)
,PercentChange.PriorModel.Costs = as.numeric(ifelse(Filters.PriorModel.MasterFilter.Costs == 0 | is.na(Info.Proposed.Costs/Info.PriorModel.Costs)| Info.Proposed.Costs/Info.PriorModel.Costs == Inf, "", round(Info.Proposed.Costs/Info.PriorModel.Costs-1,2)))
,PercentChange.PriorYear.Costs = as.numeric(ifelse(Filters.PriorYear.MasterFilter.Costs == 0 | is.na(Info.Proposed.Costs/Info.PriorYear.Costs)| Info.Proposed.Costs/Info.PriorYear.Costs == Inf, "", round(Info.Proposed.Costs/Info.PriorYear.Costs-1,2)))
,PercentChange.PriorModel.CostsVsEAP = as.numeric(ifelse(is.na(as.numeric(PercentChange.PriorModel.Costs) - as.numeric(PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv)), "", PercentChange.PriorModel.Costs - PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv))
,PercentChange.PriorYear.CostsVsEAP = as.numeric(ifelse(is.na(as.numeric(PercentChange.PriorYear.Costs) - as.numeric(PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv)), "", PercentChange.PriorYear.Costs - PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv))
#SR, CTR, and Best Par
,Info.Proposed.ScheduleRating.MaxAvailable = Proposed.Pricing.Max_Credit.Available
,Info.PriorModel.ScheduleRating.MaxAvailable = PriorModel.Pricing.Max_Credit.Available
,Info.PriorYear.ScheduleRating.MaxAvailable = PriorYear.Pricing.Max_Credit.Available
,Info.Proposed.CTR.MinAvailable = Proposed.Pricing.Min_CTR.Available
,Info.PriorModel.CTR.MinAvailable = PriorModel.Pricing.Min_CTR.Available
,Info.PriorYear.CTR.MinAvailable = PriorYear.Pricing.Min_CTR.Available
,Info.Proposed.PAR.BestPAR = Proposed.Pricing.Par_Plan.Best_Par_Plan
,Info.PriorModel.PAR.BestPAR = PriorModel.Pricing.Par_Plan.Best_Par_Plan
,Info.PriorYear.PAR.BestPAR = PriorYear.Pricing.Par_Plan.Best_Par_Plan
#Expenses
,Info.Proposed.Expenses.OnLevelAdjustment = Proposed.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.PriorModel.Expenses.OnLevelAdjustment = PriorModel.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.PriorYear.Expenses.OnLevelAdjustment = PriorYear.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.Proposed.Expenses.ExtraExpense = Proposed.Pricing.Expenses.Extra_Expense.Amount
,Info.PriorModel.Expenses.ExtraExpense = PriorModel.Pricing.Expenses.Extra_Expense.Amount
,Info.PriorYear.Expenses.ExtraExpense = PriorYear.Pricing.Expenses.Extra_Expense.Amount
,Info.Proposed.Expenses.Commissions = Proposed.Pricing.Expenses.Commission.Amount
,Info.PriorModel.Expenses.Commissions = PriorModel.Pricing.Expenses.Commission.Amount
,Info.PriorYear.Expenses.Commissions = PriorYear.Pricing.Expenses.Commission.Amount
,Info.Proposed.Expenses.ULAE = Proposed.Pricing.Expenses.ULAE.Amount
,Info.PriorModel.Expenses.ULAE = PriorModel.Pricing.Expenses.ULAE.Amount
,Info.PriorYear.Expenses.ULAE = PriorYear.Pricing.Expenses.ULAE.Amount
#Losses
,Info.Proposed.Losses.UnadjustedLossEstimate = Proposed.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.PriorModel.Losses.UnadjustedLossEstimate = PriorModel.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.PriorYear.Losses.UnadjustedLossEstimate = PriorYear.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.Proposed.Losses.XmodAdjPayrollGrowth = Proposed.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.PriorModel.Losses.XmodAdjPayrollGrowth = PriorModel.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.PriorYear.Losses.XmodAdjPayrollGrowth = PriorYear.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.Proposed.Losses.9xlLayerLoss = Proposed.Loss_Info.Layer_Loss_Pick
,Info.PriorModel.Losses.9xlLayerLoss = PriorModel.Loss_Info.Layer_Loss_Pick
,Info.PriorYear.Losses.9xlLayerLoss = PriorYear.Loss_Info.Layer_Loss_Pick
,Info.Proposed.Losses.PrelimLossEstimate.1MLoss = Info.Proposed.Expenses.ULAE/Proposed.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.PriorModel.Losses.PrelimLossEstimate.1MLoss = Info.PriorModel.Expenses.ULAE/PriorModel.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.PriorYear.Losses.PrelimLossEstimate.1MLoss = Info.PriorYear.Expenses.ULAE/PriorYear.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.Proposed.Losses.LayeredLossAdjustment = Proposed.Loss_Info.Layer_Loss_Adjustment
,Info.PriorModel.Losses.LayeredLossAdjustment = PriorModel.Loss_Info.Layer_Loss_Adjustment
,Info.PriorYear.Losses.LayeredLossAdjustment = PriorYear.Loss_Info.Layer_Loss_Adjustment
,Info.Proposed.Losses.FinalLossLAE = Info.Proposed.Losses.PrelimLossEstimate.1MLoss + Info.Proposed.Expenses.ULAE
,Info.PriorModel.Losses.FinalLossLAE = Info.PriorModel.Losses.PrelimLossEstimate.1MLoss + Info.PriorModel.Expenses.ULAE
,Info.PriorYear.Losses.FinalLossLAE = Info.PriorYear.Losses.PrelimLossEstimate.1MLoss + Info.PriorYear.Expenses.ULAE
#FxS
,Info.Proposed.FxSMtd.Amount = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.PriorModel.FxSMtd.Amount = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.PriorYear.FxSMtd.Amount = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.Proposed.FxSMtd.Frequency = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.PriorModel.FxSMtd.Frequency = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.PriorYear.FxSMtd.Frequency = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.Proposed.FxSMtd.Severity = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorModel.FxSMtd.Severity = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorYear.FxSMtd.Severity = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorModel.SevFlagChg = ifelse(Proposed.Loss_Info.Severity_Override.Flag == PriorModel.Loss_Info.Severity_Override.Flag, 0, 1)
,Info.PriorYear.SevFlagChg = ifelse(Proposed.Loss_Info.Severity_Override.Flag == PriorYear.Loss_Info.Severity_Override.Flag, 0, 1)
#Triggers
,Info.Proposed.Triggers.KP_Loss_Adj = Proposed.Pricing.KP_Pricing_Loss_Adj
,Info.PriorModel.Triggers.KP_Loss_Adj = PriorModel.Pricing.KP_Pricing_Loss_Adj
,Info.PriorYear.Triggers.KP_Loss_Adj = PriorYear.Pricing.KP_Pricing_Loss_Adj
,Info.Proposed.Triggers.LossBeforeTriggers = Info.Proposed.Losses.FinalLossLAE + Info.Proposed.Triggers.KP_Loss_Adj
,Info.PriorModel.Triggers.LossBeforeTriggers = Info.PriorModel.Losses.FinalLossLAE + Info.PriorModel.Triggers.KP_Loss_Adj
,Info.PriorYear.Triggers.LossBeforeTriggers = Info.PriorYear.Losses.FinalLossLAE + Info.PriorYear.Triggers.KP_Loss_Adj
,Info.Proposed.Triggers.Kratio.Amount = as.numeric(Proposed.Triggers.Frequency_to_Premium.Premium)
,Info.PriorModel.Triggers.Kratio.Amount = as.numeric(PriorModel.Triggers.Frequency_to_Premium.Premium)
,Info.PriorYear.Triggers.Kratio.Amount = as.numeric(PriorYear.Triggers.Frequency_to_Premium.Premium)
,Info.Proposed.Triggers.Xratio.Amount = as.numeric(Proposed.Triggers.Rate_Adequacy.Premium)
,Info.PriorModel.Triggers.Xratio.Amount = as.numeric(PriorModel.Triggers.Rate_Adequacy.Premium)
,Info.PriorYear.Triggers.Xratio.Amount = as.numeric(PriorYear.Triggers.Rate_Adequacy.Premium)
,Info.Proposed.Triggers.KvsX.Amount = as.numeric(Proposed.Triggers.K_vs_X_Trade_off.Premium)
,Info.PriorModel.Triggers.KvsX.Amount = as.numeric(PriorModel.Triggers.K_vs_X_Trade_off.Premium)
,Info.PriorYear.Triggers.KvsX.Amount = as.numeric(PriorYear.Triggers.K_vs_X_Trade_off.Premium)
,Info.Proposed.Triggers.Deviation.Amount = as.numeric(Proposed.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.PriorModel.Triggers.Deviation.Amount = as.numeric(PriorModel.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.PriorYear.Triggers.Deviation.Amount = as.numeric(PriorYear.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.Proposed.Triggers.Kratio.Trigger = ifelse(Proposed.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Xratio.Trigger = ifelse(Proposed.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.KvsX.Trigger = ifelse(Proposed.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Deviation.Trigger = ifelse(Proposed.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Any.Trigger = ifelse((Info.Proposed.Triggers.Kratio.Trigger + Info.Proposed.Triggers.Xratio.Trigger + Info.Proposed.Triggers.KvsX.Trigger + Info.Proposed.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.PriorModel.Triggers.Kratio.Trigger = ifelse(PriorModel.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Xratio.Trigger = ifelse(PriorModel.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.KvsX.Trigger = ifelse(PriorModel.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Deviation.Trigger = ifelse(PriorModel.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Any.Trigger = ifelse((Info.PriorModel.Triggers.Kratio.Trigger + Info.PriorModel.Triggers.Xratio.Trigger + Info.PriorModel.Triggers.KvsX.Trigger + Info.PriorModel.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.PriorYear.Triggers.Kratio.Trigger = ifelse(PriorYear.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Xratio.Trigger = ifelse(PriorYear.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.KvsX.Trigger = ifelse(PriorYear.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Deviation.Trigger = ifelse(PriorYear.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Any.Trigger = ifelse((Info.PriorYear.Triggers.Kratio.Trigger + Info.PriorYear.Triggers.Xratio.Trigger + Info.PriorYear.Triggers.KvsX.Trigger + Info.PriorYear.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.Proposed.Triggers.FinalLossAfterTriggers = pmax(Info.Proposed.Triggers.Kratio.Amount, Info.Proposed.Triggers.Xratio.Amount, Info.Proposed.Triggers.KvsX.Amount, Info.Proposed.Triggers.Deviation.Amount)
,Info.PriorModel.Triggers.FinalLossAfterTriggers = pmax(Info.PriorModel.Triggers.Kratio.Amount, Info.PriorModel.Triggers.Xratio.Amount, Info.PriorModel.Triggers.KvsX.Amount, Info.PriorModel.Triggers.Deviation.Amount)
,Info.PriorYear.Triggers.FinalLossAfterTriggers = pmax(Info.PriorYear.Triggers.Kratio.Amount, Info.PriorYear.Triggers.Xratio.Amount, Info.PriorYear.Triggers.KvsX.Amount, Info.PriorYear.Triggers.Deviation.Amount)
,Info.Proposed.Triggers.TriggeredIncrease.Percentage = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.Proposed.Triggers.LossBeforeTriggers - 1
,Info.PriorModel.Triggers.TriggeredIncrease.Percentage = Info.PriorModel.Triggers.FinalLossAfterTriggers/Info.PriorModel.Triggers.LossBeforeTriggers - 1
,Info.PriorYear.Triggers.TriggeredIncrease.Percentage = Info.PriorYear.Triggers.FinalLossAfterTriggers/Info.PriorYear.Triggers.LossBeforeTriggers - 1
,PercentChange.PriorModel.Losses.FinalLossAfterTrigger = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.PriorModel.Triggers.FinalLossAfterTriggers - 1
,PercentChange.PriorYear.Losses.FinalLossAfterTrigger = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.PriorYear.Triggers.FinalLossAfterTriggers - 1
#Misc
,Info.Proposed.RequestDate = as.Date(ymd(Proposed.BrokerData.requestDate), format = "%m/%d/%Y")
,Info.Proposed.PolicyEffectiveDate = as.Date(Proposed.in.Submission_Info.Policy_Effective_Date_0, format = "%m/%d/%Y")
,Info.Proposed.PolicyExpirationDate = as.Date(Proposed.in.Submission_Info.Policy_Expiration_Date_0, format = "%m/%d/%Y")
,Info.Covid = ifelse(str_c(Info.PrincipalState,Proposed.Governing_Class.Class_Code) %in% covid, 1, 0)
,Info.PriorModel.ManualInclude = 1
,Info.PriorYear.ManualInclude = 1
) %>%
left_join(SubmissionMasterTable, by = c("Info.id"="XldpWarehouseId")) %>%
mutate(Info.Proposed.Issued = ifelse(inforceCheck(Info.Proposed.PolicyEffectiveDate, Info.Proposed.PolicyExpirationDate, Info.Proposed.RequestDate) & SubmissionStatus=="issued", 1, 0)) %>%
TempCombined <- TempProposed %>%
left_join(TempPriorModel ,by = c("Proposed.id" = "PriorModel.id")) %>%
left_join(TempPriorYear ,by = c("Proposed.id" = "PriorYear.id")) %>%
mutate(Info.PrincipalState = rep(FilenameData$State[i] ,nrow(TempProposed))
,Proposed.Filename = rep(str_extract(FilenameData$Proposed[i] ,pattern = "RS_.*") ,nrow(TempProposed))
,PriorModel.Filename = rep(str_extract(FilenameData$PriorModel[i] ,pattern = "RS_.*") ,nrow(TempProposed))
,PriorYear.Filename = rep(str_extract(FilenameData$PriorYear[i] ,pattern = "RS_.*") ,nrow(TempProposed))
,Proposed.Premium.Manual_Premium.PrincipalState = (!!as.name(str_c("Proposed.Premium.Manual_Premium." ,FilenameData$State[i])))
,PriorModel.Premium.Manual_Premium.PrincipalState = (!!as.name(str_c("PriorModel.Premium.Manual_Premium." ,FilenameData$State[i])))
,PriorYear.Premium.Manual_Premium.PrincipalState = (!!as.name(str_c("PriorYear.Premium.Manual_Premium." ,FilenameData$State[i])))
,Proposed.Premium.EAP_excl_TRIA.PrincipalState = (!!as.name(str_c("Proposed.Premium.EAP_excl_TRIA." ,FilenameData$State[i])))
,PriorModel.Premium.EAP_excl_TRIA.PrincipalState = (!!as.name(str_c("PriorModel.Premium.EAP_excl_TRIA." ,FilenameData$State[i])))
,PriorYear.Premium.EAP_excl_TRIA.PrincipalState = (!!as.name(str_c("PriorYear.Premium.EAP_excl_TRIA." ,FilenameData$State[i])))
) %>%
filter(PriorYear.MisreadError.Indicator %in% c(NA ,0) & PriorModel.MisreadError.Indicator %in% c(NA ,0) & Proposed.MisreadError.Indicator %in% c(NA ,0)) %>%
select(Info.PrincipalState:PriorYear.Filename ,everything() , -contains("MisreadError.Indicator"))
if(wsdl$ProposedCheck[i] == 1) {
proposedCR = TempCombined$Proposed.Pricing.Combined_Ratio.Max/100
} else{
proposedCR = TempCombined$Proposed.Pricing.Combined_Ratio.Target
}
if(wsdl$PriorModelCheck[i] == 1) {
priorModelCR = TempCombined$PriorModel.Pricing.Combined_Ratio.Max/100
} else{
priorModelCR = TempCombined$PriorModel.Pricing.Combined_Ratio.Target
}
if(wsdl$PriorYearCheck[i] == 1) {
priorYrCR = TempCombined$PriorYear.Pricing.Combined_Ratio.Max/100
} else{
priorYrCR = TempCombined$PriorYear.Pricing.Combined_Ratio.Target
}
##Moving formulas out of Data sheet of comparison template R script to speed up Excel process
##Had to add in all the as.numeric's b/c blank rows were messing with the type that R would determine the columns to have
TempCombined <- TempCombined %>%
mutate(Info.id = Proposed.id
,Info.AccountId = Proposed.Account_ID
,Info.Proposal_Number = Proposed.Proposal_Number
#Loading Errors
,Info.PriorModel.LoadingError = ifelse(Proposed.LoadingError.Indicator + PriorModel.LoadingError.Indicator > 0, 1, 0)
,Info.PriorYear.LoadingError = ifelse(Proposed.LoadingError.Indicator + PriorYear.LoadingError.Indicator > 0, 1, 0)
#Par and CR Info; CR values are set as placeholders, will be set after this command
,Info.Proposed.ParPlanPercent = as.numeric(ifelse(Proposed.Pricing.Par_Plan.Best_Par_Plan == "" | Proposed.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(Proposed.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(Proposed.Pricing.Par_Plan.Best_Par_Plan, nchar(Proposed.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(Proposed.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.PriorModel.ParPlanPercent = as.numeric(ifelse(PriorModel.Pricing.Par_Plan.Best_Par_Plan == "" | PriorModel.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(PriorModel.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(PriorModel.Pricing.Par_Plan.Best_Par_Plan, nchar(PriorModel.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(PriorModel.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.PriorYear.ParPlanPercent = as.numeric(ifelse(PriorYear.Pricing.Par_Plan.Best_Par_Plan == "" | PriorYear.Pricing.Par_Plan.Best_Par_Plan == "N" | is.na(PriorYear.Pricing.Par_Plan.Best_Par_Plan), 0, as.numeric(substr(PriorYear.Pricing.Par_Plan.Best_Par_Plan, nchar(PriorYear.Pricing.Par_Plan.Best_Par_Plan)-1, nchar(PriorYear.Pricing.Par_Plan.Best_Par_Plan)))/100))
,Info.Proposed.CombinedRatio = proposedCR
,Info.PriorModel.CombinedRatio = priorModelCR
,Info.PriorYear.CombinedRatio = priorYrCR
#Premium Flags
,Info.SingleStateFlag = ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState == Proposed.Premium.EAP_excl_TRIA.Total, 1, 0)
,Info.Proposed.PercentEapInPrincipalState = ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total == Inf | is.na(Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total), "", Proposed.Premium.EAP_excl_TRIA.PrincipalState/Proposed.Premium.EAP_excl_TRIA.Total)
#EAP Calculations
,Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(Proposed.Premium.EAP_excl_TRIA.Total == "" | Proposed.Pricing.Expenses.Dividend_Expense.Amount == "", "", Proposed.Premium.EAP_excl_TRIA.Total - Proposed.Pricing.Expenses.Dividend_Expense.Amount))
,Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(PriorModel.Premium.EAP_excl_TRIA.Total == "" | PriorModel.Pricing.Expenses.Dividend_Expense.Amount == "", "", PriorModel.Premium.EAP_excl_TRIA.Total - PriorModel.Pricing.Expenses.Dividend_Expense.Amount))
,Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv = as.numeric(ifelse(PriorYear.Premium.EAP_excl_TRIA.Total == "" | PriorYear.Pricing.Expenses.Dividend_Expense.Amount == "", "", PriorYear.Premium.EAP_excl_TRIA.Total - PriorYear.Pricing.Expenses.Dividend_Expense.Amount))
,Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Proposed.Premium.EAP_excl_TRIA.PrincipalState == "", "", Proposed.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.Proposed.ParPlanPercent)))
,Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(PriorModel.Premium.EAP_excl_TRIA.PrincipalState == "", "", PriorModel.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.PriorModel.ParPlanPercent)))
,Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(PriorYear.Premium.EAP_excl_TRIA.PrincipalState == "", "", PriorYear.Premium.EAP_excl_TRIA.PrincipalState * (1-Info.PriorYear.ParPlanPercent)))
,Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv == "" | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv == "" | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv == "" | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorModel.CombinedRatio/Info.Proposed.CombinedRatio)))
,Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj = as.numeric(ifelse(Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv == "" | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) | (Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio) == Inf, "", (Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv * Info.PriorYear.CombinedRatio/Info.Proposed.CombinedRatio)))
#MP Calculations
,Info.Proposed.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(Proposed.Premium.Manual_Premium.Total == "", "", Proposed.Premium.Manual_Premium.Total/(1+coalesce(Proposed.Pricing.Min_CTR.Available,0))))
,Info.PriorModel.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(PriorModel.Premium.Manual_Premium.Total == "", "", PriorModel.Premium.Manual_Premium.Total/(1+coalesce(PriorModel.Pricing.Min_CTR.Available,0))))
,Info.PriorYear.Premium.ManualPremium.Total.NetofCTR = as.numeric(ifelse(PriorYear.Premium.Manual_Premium.Total == "", "", PriorYear.Premium.Manual_Premium.Total/(1+coalesce(PriorYear.Pricing.Min_CTR.Available,0))))
,Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(Proposed.Premium.Manual_Premium.PrincipalState == "", "", Proposed.Premium.Manual_Premium.PrincipalState/(1+coalesce(Proposed.Pricing.Min_CTR.Available,0))))
,Info.PriorModel.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(PriorModel.Premium.Manual_Premium.PrincipalState == "", "", PriorModel.Premium.Manual_Premium.PrincipalState/(1+coalesce(PriorModel.Pricing.Min_CTR.Available,0))))
,Info.PriorYear.Premium.ManualPremium.PrincipalState.NetofCTR = as.numeric(ifelse(PriorYear.Premium.Manual_Premium.PrincipalState == "", "", PriorYear.Premium.Manual_Premium.PrincipalState/(1+coalesce(PriorYear.Pricing.Min_CTR.Available,0))))
#Cost and Profit Calculations
,Info.Proposed.Costs = as.numeric(Proposed.Price.EAPxDIV_Achieved * (1 - Proposed.Pricing.Income.Underwriting.Percentage))
,Info.PriorModel.Costs = as.numeric(PriorModel.Price.EAPxDIV_Achieved * (1 - PriorModel.Pricing.Income.Underwriting.Percentage))
,Info.PriorYear.Costs = as.numeric(PriorYear.Price.EAPxDIV_Achieved * (1 - PriorYear.Pricing.Income.Underwriting.Percentage))
,Info.Proposed.Profit = Proposed.Pricing.Income.Underwriting.Percentage
,Info.PriorModel.Profit = PriorModel.Pricing.Income.Underwriting.Percentage
,Info.PriorYear.Profit = PriorYear.Pricing.Income.Underwriting.Percentage
#Filters
,Filters.EapDistribution = coalesce(ifelse(Info.Proposed.PercentEapInPrincipalState >=MinPercentInState, 1, 0),0)
,Filters.ManualExclude = coalesce(ifelse(Info.id %in% manualexclude, 0, 1),0)
,Filters.ARatedClass = coalesce(ifelse(sum(TempCombined[1,which(grepl("Class_Premium_Detail.Rate", colnames(TempCombined)))] == 99.99, na.rm=T) > 0 | sum(TempCombined[1,which(grepl("Class_Premium_Detail.Rate", colnames(TempCombined)))] == 99999.99, na.rm=T) > 0, 0, 1),0)
,Filters.PriorModel.AccountExists = coalesce(ifelse(PriorModel.BrokerData.serviceCall == "", 0, 1),0)
,Filters.PriorYear.AccountExists = coalesce(ifelse(PriorYear.BrokerData.serviceCall == "", 0, 1),0)
,Filters.Proposed.CombinedRatio = coalesce(ifelse(abs(1-Info.Proposed.CombinedRatio - Proposed.Pricing.Income.Underwriting.Percentage) < ProposedMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorModel.CombinedRatio = coalesce(ifelse(abs(1-Info.PriorModel.CombinedRatio - PriorModel.Pricing.Income.Underwriting.Percentage) < PriorModelMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorYear.CombinedRatio = coalesce(ifelse(abs(1-Info.PriorYear.CombinedRatio - PriorYear.Pricing.Income.Underwriting.Percentage) < PriorYearMaxDistanceFromTarget, 1, 0),0)
,Filters.PriorModel.PremiumSize = coalesce(ifelse(is.na(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf | is.na(Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf,0,ifelse(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize & Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize, 1, 0)),0)
,Filters.PriorYear.PremiumSize = coalesce(ifelse(is.na(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf | is.na(Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv) | Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv == Inf,0,ifelse(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize & Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDiv >= MinPremSize, 1, 0)),0)
,Filters.PriorModel.MasterFilter = Filters.EapDistribution * Filters.ManualExclude * Filters.ARatedClass * Filters.PriorModel.AccountExists * Filters.PriorModel.CombinedRatio * Filters.PriorModel.PremiumSize * Filters.Proposed.CombinedRatio
,Filters.PriorYear.MasterFilter = Filters.EapDistribution * Filters.ManualExclude * Filters.ARatedClass * Filters.PriorYear.AccountExists * Filters.PriorYear.CombinedRatio * Filters.PriorYear.PremiumSize * Filters.Proposed.CombinedRatio
,Filters.PriorModel.MasterFilter.Costs = Filters.PriorModel.AccountExists * Filters.ARatedClass
,Filters.PriorYear.MasterFilter.Costs = Filters.PriorYear.AccountExists * Filters.ARatedClass
#% Chgs
,PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv/Info.PriorModel.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.Total.NetOfDiv/Info.PriorYear.Premium.EAP_excl_TRIA.Total.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorModel.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv/Info.PriorModel.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorYear.EAP_excl_TRIA.PrincipalState.NetOfDiv = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.EAP_excl_TRIA.PrincipalState.NetOfDiv/Info.PriorYear.Premium.EAP_excl_TRIA.PrincipalState.NetOfDivWithCrAdj - 1, 2)))
,PercentChange.PriorModel.PrincipalState.ManualPremium.NetofCTR = as.numeric(ifelse(Filters.PriorModel.MasterFilter == 0, "", round(Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR/Info.PriorModel.Premium.ManualPremium.PrincipalState.NetofCTR - 1, 2)))
,PercentChange.PriorYear.PrincipalState.ManualPremium.NetofCTR = as.numeric(ifelse(Filters.PriorYear.MasterFilter == 0, "", round(Info.Proposed.Premium.ManualPremium.PrincipalState.NetofCTR/Info.PriorYear.Premium.ManualPremium.PrincipalState.NetofCTR - 1, 2)))
,PercentChange.PriorModel.Proft = as.numeric(Proposed.Pricing.Income.Underwriting.Percentage - PriorModel.Pricing.Income.Underwriting.Percentage)
,PercentChange.PriorYear.Proft = as.numeric(Proposed.Pricing.Income.Underwriting.Percentage - PriorYear.Pricing.Income.Underwriting.Percentage)
,PercentChange.PriorModel.Costs = as.numeric(ifelse(Filters.PriorModel.MasterFilter.Costs == 0 | is.na(Info.Proposed.Costs/Info.PriorModel.Costs)| Info.Proposed.Costs/Info.PriorModel.Costs == Inf, "", round(Info.Proposed.Costs/Info.PriorModel.Costs-1,2)))
,PercentChange.PriorYear.Costs = as.numeric(ifelse(Filters.PriorYear.MasterFilter.Costs == 0 | is.na(Info.Proposed.Costs/Info.PriorYear.Costs)| Info.Proposed.Costs/Info.PriorYear.Costs == Inf, "", round(Info.Proposed.Costs/Info.PriorYear.Costs-1,2)))
,PercentChange.PriorModel.CostsVsEAP = as.numeric(ifelse(is.na(as.numeric(PercentChange.PriorModel.Costs) - as.numeric(PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv)), "", PercentChange.PriorModel.Costs - PercentChange.PriorModel.EAP_excl_TRIA.NetOfDiv))
,PercentChange.PriorYear.CostsVsEAP = as.numeric(ifelse(is.na(as.numeric(PercentChange.PriorYear.Costs) - as.numeric(PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv)), "", PercentChange.PriorYear.Costs - PercentChange.PriorYear.EAP_excl_TRIA.NetOfDiv))
#SR, CTR, and Best Par
,Info.Proposed.ScheduleRating.MaxAvailable = Proposed.Pricing.Max_Credit.Available
,Info.PriorModel.ScheduleRating.MaxAvailable = PriorModel.Pricing.Max_Credit.Available
,Info.PriorYear.ScheduleRating.MaxAvailable = PriorYear.Pricing.Max_Credit.Available
,Info.Proposed.CTR.MinAvailable = Proposed.Pricing.Min_CTR.Available
,Info.PriorModel.CTR.MinAvailable = PriorModel.Pricing.Min_CTR.Available
,Info.PriorYear.CTR.MinAvailable = PriorYear.Pricing.Min_CTR.Available
,Info.Proposed.PAR.BestPAR = Proposed.Pricing.Par_Plan.Best_Par_Plan
,Info.PriorModel.PAR.BestPAR = PriorModel.Pricing.Par_Plan.Best_Par_Plan
,Info.PriorYear.PAR.BestPAR = PriorYear.Pricing.Par_Plan.Best_Par_Plan
#Expenses
,Info.Proposed.Expenses.OnLevelAdjustment = Proposed.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.PriorModel.Expenses.OnLevelAdjustment = PriorModel.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.PriorYear.Expenses.OnLevelAdjustment = PriorYear.Pricing.Expenses.On_Level_Adjustment.Amount
,Info.Proposed.Expenses.ExtraExpense = Proposed.Pricing.Expenses.Extra_Expense.Amount
,Info.PriorModel.Expenses.ExtraExpense = PriorModel.Pricing.Expenses.Extra_Expense.Amount
,Info.PriorYear.Expenses.ExtraExpense = PriorYear.Pricing.Expenses.Extra_Expense.Amount
,Info.Proposed.Expenses.Commissions = Proposed.Pricing.Expenses.Commission.Amount
,Info.PriorModel.Expenses.Commissions = PriorModel.Pricing.Expenses.Commission.Amount
,Info.PriorYear.Expenses.Commissions = PriorYear.Pricing.Expenses.Commission.Amount
,Info.Proposed.Expenses.ULAE = Proposed.Pricing.Expenses.ULAE.Amount
,Info.PriorModel.Expenses.ULAE = PriorModel.Pricing.Expenses.ULAE.Amount
,Info.PriorYear.Expenses.ULAE = PriorYear.Pricing.Expenses.ULAE.Amount
#Losses
,Info.Proposed.Losses.UnadjustedLossEstimate = Proposed.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.PriorModel.Losses.UnadjustedLossEstimate = PriorModel.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.PriorYear.Losses.UnadjustedLossEstimate = PriorYear.Loss_Info.Unadjusted_Loss_Estimate.Amount
,Info.Proposed.Losses.XmodAdjPayrollGrowth = Proposed.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.PriorModel.Losses.XmodAdjPayrollGrowth = PriorModel.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.PriorYear.Losses.XmodAdjPayrollGrowth = PriorYear.Loss_Info.Payroll_Growth_Surcharge.Amount
,Info.Proposed.Losses.9xlLayerLoss = Proposed.Loss_Info.Layer_Loss_Pick
,Info.PriorModel.Losses.9xlLayerLoss = PriorModel.Loss_Info.Layer_Loss_Pick
,Info.PriorYear.Losses.9xlLayerLoss = PriorYear.Loss_Info.Layer_Loss_Pick
,Info.Proposed.Losses.PrelimLossEstimate.1MLoss = Info.Proposed.Expenses.ULAE/Proposed.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.PriorModel.Losses.PrelimLossEstimate.1MLoss = Info.PriorModel.Expenses.ULAE/PriorModel.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.PriorYear.Losses.PrelimLossEstimate.1MLoss = Info.PriorYear.Expenses.ULAE/PriorYear.Pricing.Expenses.ULAE_Percentage_of_Loss.Percentage
,Info.Proposed.Losses.LayeredLossAdjustment = Proposed.Loss_Info.Layer_Loss_Adjustment
,Info.PriorModel.Losses.LayeredLossAdjustment = PriorModel.Loss_Info.Layer_Loss_Adjustment
,Info.PriorYear.Losses.LayeredLossAdjustment = PriorYear.Loss_Info.Layer_Loss_Adjustment
,Info.Proposed.Losses.FinalLossLAE = Info.Proposed.Losses.PrelimLossEstimate.1MLoss + Info.Proposed.Expenses.ULAE
,Info.PriorModel.Losses.FinalLossLAE = Info.PriorModel.Losses.PrelimLossEstimate.1MLoss + Info.PriorModel.Expenses.ULAE
,Info.PriorYear.Losses.FinalLossLAE = Info.PriorYear.Losses.PrelimLossEstimate.1MLoss + Info.PriorYear.Expenses.ULAE
#FxS
,Info.Proposed.FxSMtd.Amount = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.PriorModel.FxSMtd.Amount = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.PriorYear.FxSMtd.Amount = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Method_Estimate.excl_Cred_Charge
,Info.Proposed.FxSMtd.Frequency = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.PriorModel.FxSMtd.Frequency = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.PriorYear.FxSMtd.Frequency = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.Credibility_Weighted_Indemnity_Count.Wtd_Avg
,Info.Proposed.FxSMtd.Severity = Proposed.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorModel.FxSMtd.Severity = PriorModel.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorYear.FxSMtd.Severity = PriorYear.Loss_Info.Loss_Development_Method.Frequency_x_Severity.ICW_Indemnity_Severity
,Info.PriorModel.SevFlagChg = ifelse(Proposed.Loss_Info.Severity_Override.Flag == PriorModel.Loss_Info.Severity_Override.Flag, 0, 1)
,Info.PriorYear.SevFlagChg = ifelse(Proposed.Loss_Info.Severity_Override.Flag == PriorYear.Loss_Info.Severity_Override.Flag, 0, 1)
#Triggers
,Info.Proposed.Triggers.KP_Loss_Adj = Proposed.Pricing.KP_Pricing_Loss_Adj
,Info.PriorModel.Triggers.KP_Loss_Adj = PriorModel.Pricing.KP_Pricing_Loss_Adj
,Info.PriorYear.Triggers.KP_Loss_Adj = PriorYear.Pricing.KP_Pricing_Loss_Adj
,Info.Proposed.Triggers.LossBeforeTriggers = Info.Proposed.Losses.FinalLossLAE + Info.Proposed.Triggers.KP_Loss_Adj
,Info.PriorModel.Triggers.LossBeforeTriggers = Info.PriorModel.Losses.FinalLossLAE + Info.PriorModel.Triggers.KP_Loss_Adj
,Info.PriorYear.Triggers.LossBeforeTriggers = Info.PriorYear.Losses.FinalLossLAE + Info.PriorYear.Triggers.KP_Loss_Adj
,Info.Proposed.Triggers.Kratio.Amount = as.numeric(Proposed.Triggers.Frequency_to_Premium.Premium)
,Info.PriorModel.Triggers.Kratio.Amount = as.numeric(PriorModel.Triggers.Frequency_to_Premium.Premium)
,Info.PriorYear.Triggers.Kratio.Amount = as.numeric(PriorYear.Triggers.Frequency_to_Premium.Premium)
,Info.Proposed.Triggers.Xratio.Amount = as.numeric(Proposed.Triggers.Rate_Adequacy.Premium)
,Info.PriorModel.Triggers.Xratio.Amount = as.numeric(PriorModel.Triggers.Rate_Adequacy.Premium)
,Info.PriorYear.Triggers.Xratio.Amount = as.numeric(PriorYear.Triggers.Rate_Adequacy.Premium)
,Info.Proposed.Triggers.KvsX.Amount = as.numeric(Proposed.Triggers.K_vs_X_Trade_off.Premium)
,Info.PriorModel.Triggers.KvsX.Amount = as.numeric(PriorModel.Triggers.K_vs_X_Trade_off.Premium)
,Info.PriorYear.Triggers.KvsX.Amount = as.numeric(PriorYear.Triggers.K_vs_X_Trade_off.Premium)
,Info.Proposed.Triggers.Deviation.Amount = as.numeric(Proposed.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.PriorModel.Triggers.Deviation.Amount = as.numeric(PriorModel.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.PriorYear.Triggers.Deviation.Amount = as.numeric(PriorYear.Triggers.Deviation_off_of_Manual_Premium.Premium)
,Info.Proposed.Triggers.Kratio.Trigger = ifelse(Proposed.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Xratio.Trigger = ifelse(Proposed.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.KvsX.Trigger = ifelse(Proposed.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Deviation.Trigger = ifelse(Proposed.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.Proposed.Triggers.Any.Trigger = ifelse((Info.Proposed.Triggers.Kratio.Trigger + Info.Proposed.Triggers.Xratio.Trigger + Info.Proposed.Triggers.KvsX.Trigger + Info.Proposed.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.PriorModel.Triggers.Kratio.Trigger = ifelse(PriorModel.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Xratio.Trigger = ifelse(PriorModel.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.KvsX.Trigger = ifelse(PriorModel.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Deviation.Trigger = ifelse(PriorModel.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.PriorModel.Triggers.Any.Trigger = ifelse((Info.PriorModel.Triggers.Kratio.Trigger + Info.PriorModel.Triggers.Xratio.Trigger + Info.PriorModel.Triggers.KvsX.Trigger + Info.PriorModel.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.PriorYear.Triggers.Kratio.Trigger = ifelse(PriorYear.Triggers.Frequency_to_Premium.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Xratio.Trigger = ifelse(PriorYear.Triggers.Rate_Adequacy.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.KvsX.Trigger = ifelse(PriorYear.Triggers.K_vs_X_Trade_off.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Deviation.Trigger = ifelse(PriorYear.Triggers.Deviation_off_of_Manual_Premium.Trigger == "Yes", 1, 0)
,Info.PriorYear.Triggers.Any.Trigger = ifelse((Info.PriorYear.Triggers.Kratio.Trigger + Info.PriorYear.Triggers.Xratio.Trigger + Info.PriorYear.Triggers.KvsX.Trigger + Info.PriorYear.Triggers.Deviation.Trigger) > 0, 1, 0)
,Info.Proposed.Triggers.FinalLossAfterTriggers = pmax(Info.Proposed.Triggers.Kratio.Amount, Info.Proposed.Triggers.Xratio.Amount, Info.Proposed.Triggers.KvsX.Amount, Info.Proposed.Triggers.Deviation.Amount)
,Info.PriorModel.Triggers.FinalLossAfterTriggers = pmax(Info.PriorModel.Triggers.Kratio.Amount, Info.PriorModel.Triggers.Xratio.Amount, Info.PriorModel.Triggers.KvsX.Amount, Info.PriorModel.Triggers.Deviation.Amount)
,Info.PriorYear.Triggers.FinalLossAfterTriggers = pmax(Info.PriorYear.Triggers.Kratio.Amount, Info.PriorYear.Triggers.Xratio.Amount, Info.PriorYear.Triggers.KvsX.Amount, Info.PriorYear.Triggers.Deviation.Amount)
,Info.Proposed.Triggers.TriggeredIncrease.Percentage = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.Proposed.Triggers.LossBeforeTriggers - 1
,Info.PriorModel.Triggers.TriggeredIncrease.Percentage = Info.PriorModel.Triggers.FinalLossAfterTriggers/Info.PriorModel.Triggers.LossBeforeTriggers - 1
,Info.PriorYear.Triggers.TriggeredIncrease.Percentage = Info.PriorYear.Triggers.FinalLossAfterTriggers/Info.PriorYear.Triggers.LossBeforeTriggers - 1
,PercentChange.PriorModel.Losses.FinalLossAfterTrigger = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.PriorModel.Triggers.FinalLossAfterTriggers - 1
,PercentChange.PriorYear.Losses.FinalLossAfterTrigger = Info.Proposed.Triggers.FinalLossAfterTriggers/Info.PriorYear.Triggers.FinalLossAfterTriggers - 1
#Misc
,Info.Proposed.RequestDate = as.Date(ymd(Proposed.BrokerData.requestDate), format = "%m/%d/%Y")
,Info.Proposed.PolicyEffectiveDate = as.Date(Proposed.in.Submission_Info.Policy_Effective_Date_0, format = "%m/%d/%Y")
,Info.Proposed.PolicyExpirationDate = as.Date(Proposed.in.Submission_Info.Policy_Expiration_Date_0, format = "%m/%d/%Y")
,Info.Covid = ifelse(str_c(Info.PrincipalState,Proposed.Governing_Class.Class_Code) %in% covid, 1, 0)
,Info.PriorModel.ManualInclude = 1
,Info.PriorYear.ManualInclude = 1
) %>%
left_join(SubmissionMasterTable, by = c("Info.id"="XldpWarehouseId")) %>%
mutate(Info.Proposed.Issued = ifelse(inforceCheck(Info.Proposed.PolicyEffectiveDate, Info.Proposed.PolicyExpirationDate, Info.Proposed.RequestDate) & SubmissionStatus=="issued", 1, 0)) %>%
# TempCombined[, which(grepl("Info\\.Proposed", colnames(TempCombined)))] <- sapply(TempCombined[, which(grepl("Info\\.Proposed", colnames(TempCombined)))],as.numeric)
# TempCombined[, which(grepl("Info\\.Prior", colnames(TempCombined)))] <- sapply(TempCombined[, which(grepl("Info\\.Prior", colnames(TempCombined)))],as.numeric)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
TempCombined$Info.Proposed.Issued
TempCombined$SubmissionStatus
print(SavePath)
print(ComparisonName)
View(TempCombined)
View(FilenameData)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R")
source("//newfs5/EXCEL/ACTUARIA/WCDEV/LDP_Redesign/Code Samples/Pricing Templates/Comparison File Mockup/Comparison File Generation.R", echo=TRUE)
